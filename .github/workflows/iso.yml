name: "Build ISO for host"

on:
  workflow_dispatch:
    inputs:
      host:
        description: "Host name to build ISO for"
        required: true
        default: "bootstrap"
        type: string

      format:
        description: "Choose ISO format (see https://github.com/nix-community/nixos-generators/#supported-formats)"
        required: false
        default: "install-iso"
        type: string

      extra_args:
        description: "Extra arguments to pass to nixos-generator"
        required: false
        default: ""
        type: string

jobs:
  build_iso:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - uses: cachix/install-nix-action@master
      with:
        install_url: https://github.com/numtide/nix-unstable-installer/releases/download/nix-2.8.0pre20220314_a618097/install
        extra_nix_config: |
          experimental-features = nix-command flakes
          system-features = nixos-test benchmark big-parallel kvm recursive-nix
          substituters = https://cache.nixos.org https://nrdxp.cachix.org https://nix-community.cachix.org https://dan-cfg.cachix.org
          trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nrdxp.cachix.org-1:Fc5PSqY2Jm1TrWfm88l6cvGWwz3s93c6IOifQWnhNW4= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= dan-cfg.cachix.org-1:elcVKJWjnDs1zzZ/Fs93FLOFS13OQx1z0TxP0Q7PH9o=
        nix_path: nixpkgs=channel:nixos-unstable

    - uses: cachix/cachix-action@master
      with:
        name: dan-cfg
        authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

    - name: Quick Nix Eval
      run: nix develop ./devshell --command evalnix

    - name: Set up env
      run: |
        extra_args="${{ github.event.inputs.extra_args }}"
        format="${{ github.event.inputs.format }}"
        host="${{ github.event.inputs.host }}"
        arch="$(nix eval --raw .\#nixosConfigurations.$host.pkgs.stdenv.hostPlatform.system)"
        nixos_version="$(nix eval --raw .\#nixosConfigurations.$host.config.system.nixos.label)"

        echo "extra_args=$extra_args" >> "$GITHUB_ENV"
        echo "format=$format" >> "$GITHUB_ENV"
        echo "host=$host" >> "$GITHUB_ENV"
        echo "arch=$arch" >> "$GITHUB_ENV"
        echo "nixos_version=$nixos_version" >> "$GITHUB_ENV"

    - name: Generate artifact name
      run: |
        artifact_name="${{ env.format }}@${{ env.host }}-${{ env.nixos_version }}-${{ env.arch }}.iso"
        echo "artifact_name=$artifact_name" >> "$GITHUB_ENV"

    - name: Build ISO for ${{ github.event.inputs.host }}
      run: |
        iso_path="$(nix develop ./devshell --command nixos-generate --format ${{ env.format }} --system ${{ env.arch }} --flake .\#${{ env.host }} ${{ env.extra_args }})"
        ln -sF "$iso_path" "${{ env.artifact_name }}"
        iso_path="${{ env.artifact_name }}"
        echo "iso_path=$iso_path" >> "$GITHUB_ENV"

    - name: Upload ISO
      uses: actions/upload-artifact@v3
      with:
        name: "${{ env.artifact_name }}"
        path: "${{ env.iso_path }}"
        retention-days: 1
